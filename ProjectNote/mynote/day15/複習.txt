[複習]
	(1)搭建
		maven : 繼承
				依賴
				聚合
		
		springboot 
		
		dubbo : 組件
				調用過程 --> 架構圖
				用途 : 輔助你多個模塊配置zookeeper進行通信調用
				
	(2)商品管理
		了解業務 : 三級分類
				   銷售屬性(值) ; 平台屬性(值)
				   spu ; sku
				   表之間的關係圖
		
		fastdfs : 文件服務
				  調用架構圖 client tracker storage
							 nginx_fastdfs_module
							 
	(3)詳情頁
		thymeleaf
	
		***緩存(重點) : cache-aside-pattern
						
						穿透 : 緩存失效後,大量業務集中訪問 -> 分布式鎖 - Redis -> setnx/set xxx ex nx -> transaction lua
																					
																				  redisson -> juc+redis
																							  lock操作
																							  
							   
							   不停的訪問沒有值的數據 -> 空數據也放到redis
							   
	(4)搜索
		入口:按三級分類;按關鍵詞
		
		elasticSearch -> index(表), type(無用了), document(一條數據), field(欄位), mapping(表結構), replication(複本,默認1個), shard(分票,默認5個), node, cluster
		
						 green(備份兩份數據以上), yellow(一份數據), red(小於一份數據)
						 
		DSL -> query, match, filter, highlight, sort, from, size, aggs
		
		銷售屬性值和麵包屑
		
	(5)單點登入
		流程要求背誦調用全流程 -> 註冊中心 -> 登入											  
											  註冊
											  認證 -> 	redis 
														jwt
								  
								  攔截器 -> 提取cookie中的token
											判斷是否需要認證 : 自訂義註解
											
	(6)購物車
		未登入購物車 -> 臨時生成userid, 保存到cookie中
						redis
						數據庫
		
		已登入購物車 -> 登入獲得userid
						redis
						數據庫
						
		合併 -> 數據庫層用sql合併 緩存重新加載
												
	(7)訂單模塊
		下單 -> 避免重複提交(冪等性) -> token頁面一份,緩存一份, 提交時對比, 對比完成刪除
										
										驗價/驗庫存 -> 異部並行操作 -> CompletalbeFutrue 異步編排工具
										
	(8)支付
		支付寶流程(背誦)
		微信流程(背誦)
		
	(9)異步通信
		mq -> 最終一致性 cap理論 base理論 -> 重試/延遲主動查詢/同步調用補充/人工處理
		
		
	(10)延遲隊列 -> 查詢支付寶狀態
					超過15分鐘,未支付關單
					利用消息隊列自己發自己收
	
	(11)輪詢 -> 定時任務 -- springtask --> 異步操作
	
	(12)拆單 -> 為什麼拆單 -> 倉庫
							  物流
							  商品類型
							  商戶
							  
				誰發起 -> 庫存模塊
				
				誰拆分 -> 訂單模塊
						  拆分依據 -> 拆單方案
									  原始訂單
									  不影響支付 -> 先支付後拆單
									  

[面試注意點]
(1)購物車價格與實時價格同步

	方案:
		(推薦)
		對某個商品寫操作,刷新實時價格(沒有存在數據庫).
		打開購物車列表時, 加載緩存, 頁面顯示新價格&老價格.
		
		如果非要實時的更新價格? (不推薦)
			cart key userid 
			建立一個skuid和userid的反向索引
				PK : skuId --> userId					 

(2)超買/超賣 扣庫存問題

	方案:
	
		首先明白, 鎖庫機制是什麼?
			下單鎖庫存 
				加鎖
					普通購買;非熱門;非秒殺
						數據庫行鎖 : for update 讀操作判斷和寫操作變為單一事務
						
					秒殺
						緩存redis : 分布式鎖redission lock lua transaction
							(但transaction是樂觀鎖,不適合併發操作)
							(樂觀鎖, 大家都去做, 只有一個成功其他會失敗)
							(悲觀鎖, 阻塞操作, 一個做,其他等)
							
						限流nginx
						
			支付鎖庫存 庫存充足

(3)分庫分表

	維度表: 類型 屬性 用戶 商品 
	
	事實表: 真正發生業務(隨著維度表固定下,時間的變化仍會越來越大)
	
			訂單 購物車 支付 積分流水
			
	
	單表達千萬級(可能就該做分庫分表) mysql
	
		工具 : mycat(中間件) shardingJdbc(jar)
	
	分庫 : 按照服務進行分庫
	
	分表 : 
		以查詢的場景 ; 最常用的查詢條件
			ex: 購物車 最常用userid, 那麼就用userid進行分片
			
		以時間為切分單位 (容易不均勻)
	
(4)程序,接口的冪等性


	插 刪 改 查
	
		天然冪等
			查 刪
			
		非天然
			插
			改 ex : update xxx set amount = amount + 1 where id = xxx
			
			變成冪等
			
				1, 加入token
				2, 加去重字段 out_trafe_no
				
				
			頁面冪等
			
				A -> post -> B (非冪等)
				=>
				A -> post, redirect --> get --> B
			
			
(5)併行 VS 併發

	併行 : 不衝突的操作			  -> 多個商品查詢庫存, 多線程

	併發 : 併行操作, 拿取相同資源 -> 秒殺, 多線程 + 鎖

(6)消息對列

	消息重複消費怎麼辦?
		冪等 :  消費端保證冪等性, token去重字段
	
	
	
	消費失敗了怎麼辦?
	
		重試機制 6 次
		延遲檢查 調用同步方法
	
	
	消息丟失怎麼辦?
	
		盡量持久化(雖然寫入速度會變慢,但通常盡量保證持久化較佳)
		
	消息堆積怎麼辦?
	
		消息堆積不是消息對列的問題,是消費端的問題,一般是消費端消費能力不足的問題.
		
		(1)消費端cpu足夠 -> 增加消息線程 @jmsListener(concurreny = 10)
		(2)消費端cpu不足夠 -> 增加消費服務器
		
(7)批處理操作

	一大堆excel, 在java程序中清洗處理後, 要導入到mysql中,但校能極差.
	
	如何優化?
	
	
	想優化,先分層 :
	
	數據庫 (io)
	
		幹掉索引 可以留主鍵, 關閉自動提交, 批量提交
	
	網路
		減少傳輸次數
		
		batch : updateBatch ; 拼接sql : insert into xxx values (xxx,xxx) ---> insert into xxx values (xxx,xxx),(xxx,xxx) 
								每一千條數據 或 一份excel 拚成一個Sql
	
	內存
	
		沒有什麼手段
	
	cpu
	
		多線程, 但如果是一張表的話, 雖然說實際寫入那一刻可能無法併行, 但數據傳輸, sql解析, 驗證是可以並行的. 
		
			一個mysql (單表5-10左右的線程)
			
(8)對一個功能點的優化

	讀操作

		緩存 : 一級緩存 mybatis 
			   二級緩存 堆緩存 (單機可以開,非單機千萬別開,因為他的緩存是存在JVM(各台機器)裡面的,很難同步,同步開銷也大 )
							堆緩存,分布式環境無法保證堆緩存的一致性
								解1:
									在nginx(反向代理)增加路由,判斷是想訪問哪一台,達到限定只寫到哪一台,就只會用到相同的緩存
				
			   獨立緩存 redis 
							需要我們保證與數據庫的一致性
			   
		
		數據庫 : 索引 ; explain ; 慢查詢日誌
		
		多線程 : 多項讀操作之間不依賴 CompletalbeFutrue + allOf			
									  
									  countDoownLatch + FutureTest
									  
									  
		動靜分離 : 增加靜態頁面讀取速度
		
		
		純靜態頁面 : 特殊場景,短期內高頻訪問且數據不會變化, 通常工具生成 thymeleaf本身就有頁面靜態化的工具
		
	
	寫操作
	
	異步
		消息隊列
		
		多線程
		

(9)程序如何打生產包

	

	
	
	
	